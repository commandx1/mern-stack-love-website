{"version":3,"sources":["hooks/useHttpClient.js","components/Container/container.js","components/Container/PageTitle.js","components/pages/şiir/Siirler.js"],"names":["useHttpClient","initialState","useState","state","setstate","isLoading","setisLoading","error","setError","open","setOpen","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortController","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","Container","props","className","children","PageTitle","id","Siirler","general","useContext","generalContext","fetchedPoems","globalState","poems","process","functions","poem","fetchPoems","map","siir","key","_id","imageUrl","src","alt","title","ReactHtmlParser","content"],"mappings":"oJAwDeA,IAtDO,SAACC,GAAkB,IAAD,EACVC,mBAASD,GADC,mBAC7BE,EAD6B,KACtBC,EADsB,OAEFF,oBAAS,GAFP,mBAE7BG,EAF6B,KAElBC,EAFkB,OAGVJ,qBAHU,mBAG7BK,EAH6B,KAGtBC,EAHsB,OAIZN,oBAAS,GAJG,mBAI7BO,EAJ6B,KAIvBC,EAJuB,KAM9BC,EAAqBC,iBAAO,IAC5BC,EAAcC,sBAAW,uCAC5B,WAAOC,GAAP,qCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,GAClDb,GAAa,GACPc,EAAsB,IAAIC,gBAChCV,EAAmBW,QAAQC,KAAKH,GAHjC,kBAK4BI,MAAMT,EAAK,CAC9BE,SACAC,OACAC,UACAM,OAAQL,EAAoBK,SATrC,cAKWC,EALX,iBAWgCA,EAASC,OAXzC,WAWWC,EAXX,OAaKjB,EAAmBW,QAAUX,EAAmBW,QAAQO,QACpD,SAAAC,GAAO,OAAIA,IAAYV,KAGjBM,EAASK,GAjBxB,uBAkBmB,IAAIC,MAAMJ,EAAaK,SAlB1C,eAoBW3B,GAAa,GApBxB,kBAqBkBsB,GArBlB,wCAuBKpB,EAAS,KAAIyB,SACb3B,GAAa,GACbI,GAAQ,GAzBb,+DAD4B,sDA6B5B,IAeH,OAPIwB,qBAAW,WACP,OAAO,WACHvB,EAAmBW,QAAQa,SAAQ,SAAAC,GAAS,OAAIA,EAAUC,cAE/D,IAGA,CAAEhC,YAAWE,QAAOE,OAAMI,cAAayB,WAbvB,WACf9B,EAAS,MACTE,GAAQ,GACRN,EAAS,KAUyCD,W,uDCrD9D,2BAMeoC,IAHG,SAAAC,GAAK,OAAI,yBAAKC,UAAU,aAAaD,EAAME,Y,iCCH7D,2BAOeC,IAJG,SAACH,GACjB,OAAO,yBAAKI,GAAG,cAAcJ,EAAME,Y,+LC6CtBG,UAxCC,WACd,IAAMC,EAAUC,qBAAWC,KADP,EAEwChD,cAA5Ba,GAFZ,EAEZR,UAFY,EAEDE,MAFC,EAEME,KAFN,EAEYI,aAC1BoC,GAHc,EAEyBX,WACxBQ,EAAQI,YAAYC,OAczC,OAZAjB,qBAAU,YACQ,uCAAG,4BAAAlB,EAAA,+EAEYH,EAAY,GAAD,OACjCuC,yCADiC,WAFvB,OAETxB,EAFS,OAKfkB,EAAQO,UAAUC,KAAKC,WAAW3B,EAAauB,OALhC,uGAAH,qDAQhBI,KACC,CAAC1C,IAGF,kBAAC,WAAD,KACE,kBAAC,IAAD,0BACA,kBAAC,IAAD,KACE,yBAAK+B,GAAG,WACLK,EAAaO,KAAI,SAACC,GAAD,OAChB,yBAAKC,IAAKD,EAAKE,IAAKlB,UAAU,aAC3BgB,EAAKG,SACJ,yBACEC,IAAG,UAAKT,yDAAL,YAAwCK,EAAKG,UAChDE,IAAKL,EAAKM,QAEV,KACJ,4BAAKN,EAAKM,OACTC,IAAgBP,EAAKQ","file":"static/js/15.8da1a960.chunk.js","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react'\r\n\r\nconst useHttpClient = (initialState) => {\r\n    const [state, setstate] = useState(initialState)\r\n    const [isLoading, setisLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const activeHttpRequests = useRef([]);\r\n    const sendRequest = useCallback(\r\n       async (url, method = \"GET\", body = null, headers = {}) => {\r\n        setisLoading(true);\r\n        const httpAbortController = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortController);\r\n        try{\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers,\r\n                signal: httpAbortController.signal\r\n            });\r\n            const responseData = await response.json()\r\n\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                reqCtrl => reqCtrl !== httpAbortController\r\n                );\r\n\r\n                  if(!response.ok){\r\n                    throw new Error(responseData.message);\r\n                  }\r\n                  setisLoading(false);\r\n                  return responseData;\r\n        } catch(err) {\r\n            setError(err.message);\r\n            setisLoading(false);\r\n            setOpen(true);\r\n            throw err;  \r\n        }\r\n    }, []);\r\n\r\n        const clearError = () => {\r\n            setError(null);\r\n            setOpen(false);\r\n            setstate(\"\")\r\n        }\r\n\r\n        useEffect((() => {\r\n            return () => {\r\n                activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\r\n            }\r\n        }),[])\r\n\r\n\r\n    return { isLoading, error, open, sendRequest, clearError, state } //isLoading=isLoading\r\n}\r\n\r\nexport default useHttpClient;\r\n","import \"./container.css\";\r\nimport React from \"react\";\r\n\r\nconst Container = props => <div className=\"container\">{props.children}</div> \r\n\r\n\r\nexport default Container\r\n","import React from \"react\";\r\nimport \"./container.css\";\r\n\r\nconst PageTitle = (props) => {\r\n  return <div id=\"page-title\">{props.children}</div>;\r\n};\r\n\r\nexport default PageTitle;\r\n","import React, { useContext, useState, Fragment, useEffect } from \"react\";\r\nimport { generalContext } from \"../../../WRAPPERS/Context/myContext\";\r\nimport \"./siirler.css\";\r\nimport Container from \"../../Container/container\";\r\nimport PageTitle from \"../../Container/PageTitle\";\r\nimport useHttpClient from \"../../../hooks/useHttpClient\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\n\r\nconst Siirler = () => {\r\n  const general = useContext(generalContext);\r\n  const { isLoading, error, open, sendRequest, clearError } = useHttpClient();\r\n  const fetchedPoems = general.globalState.poems;\r\n\r\n  useEffect(() => {\r\n    const fetchPoems = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/poems`\r\n        );\r\n        general.functions.poem.fetchPoems(responseData.poems);\r\n      } catch (err) {}\r\n    };\r\n    fetchPoems();\r\n  }, [sendRequest]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageTitle>Şiirlerimizz</PageTitle>\r\n      <Container>\r\n        <div id=\"siirler\">\r\n          {fetchedPoems.map((siir) => (\r\n            <div key={siir._id} className=\"siir-card\">\r\n              {siir.imageUrl ? (\r\n                <img\r\n                  src={`${process.env.REACT_APP_ASSET_URL}/${siir.imageUrl}`}\r\n                  alt={siir.title}\r\n                />\r\n              ) : null}\r\n              <h3>{siir.title}</h3>\r\n              {ReactHtmlParser(siir.content)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Siirler;\r\n"],"sourceRoot":""}